{% extends "layout.jinja" %}

{% block container %}

      <h1>Tower Details</h1>

      <div class="row">

        <div class="span5">

          <div id="tower_info">
            <table class="table table-bordered table-condensed">
              <thead>
                <tr>
                  <th>Overview</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>

        </div>

        <div class="offset5">
          <h4>Fuel Overview</h4>

          <div id="fuel_info">
            <table class="table table-bordered table-condensed">
              <thead>
                <tr>
                  <th>Fuel</th>
                  <th>Delta</th>
                  <th>Value</th>
                  <th>Optimal</th>
                  <th>Difference</th>
                  <th>Time Remaining</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>

        </div>

        <div class="offset5">
          <h4 id="tower_comments_title">Comments
            <a class="pull-right" href="{{ request.script_root -}}
                /audit/add/tower/{{- tower_id }}?category_name=comment">
              <i class="icon-edit"></i> Add Comment</a> </h4>

          <div id="tower_comments">
            <table class="table table-bordered table-condensed">
              <thead>
                <tr>
                  <th>Comment</th>
                  <th>User</th>
                  <th>@</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>

        </div>

      </div>

      <div class="row">

        <div class="span5">
          <h4>Tower log entries</h4>

          <div id="tower_log">
            <table class="table table-bordered table-condensed">
              <thead>
                <tr>
                  <th>State</th>
                  <th>Timestamp</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>
        </div>

        <div class="span7">
          <h4>Fuel log entries</h4>

          <div id="fuel_log">
            <table class="table table-bordered table-condensed">
              <thead>
                <tr>
                  <th>Fuel</th>
                  <th>Delta</th>
                  <th>Value</th>
                  <th>Timestamp</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>
        </div>

      </div>

{% endblock %}

{% block script %}

    var script_root = '{{ request.script_root }}';

    $(document).ready(function() {
        var host = '{{ g.json_root }}';

        $.get(host + '/tower/{{ g.tower_id }}', function(data) {
            if (data.error) {
                // XXX proper error messaging
                populateTable([data.error]);
                return null;
            }

            var tower = data.tower;

            var label = $('<div id="tower_label"></div>');
            label.text(tower.audits.label[0].reason);
            label.append('<a href="' + script_root + '/audit/add/tower/' +
                        tower.id + '?category_name=label" ' +
                    'class="pull-right">' +
                    '<i class="icon-edit"></i> edit</a>' +
                '</div>');

            var tower_values = [
                ['Label',
                    {
                        'col_value': label,
                        'value': tower.audits.label[0].reason
                    },
                ],
                ['Celestial', tower.celestialName],
                ['Region', tower.regionName],
                ['Tower Type', tower.typeName],
                ['State', tower.stateName],
                ['Online Since', tower.onlineSinceFormatted],
                ['Offline At', tower.offlineAtFormatted],
                ['Time Remaining', tower.timeRemainingFormatted]
            ];

            if (tower.state == 3) {
                tower_values.push(
                    ['Reinforcement ends at', tower.stateTimestampFormatted],
                    ['Reinforcement ends in', tower.stateTimestampDeltaFormatted]
                );
            }

            if (tower.state == 4) {
                tower_values.push(
                    ['Reinforcement', tower.reinforcementLengthFormatted]
                );
            }

            populateTower(tower_values);

            var fuels = [];
            var fuel = data.fuel;
            for (var key in fuel) {
                var item = fuel[key];
                var value = [
                    // string casting to work around sort.
                    item.fuelName,
                    item.delta + '',
                    item.value + '',
                    item.optimalValue + '',
                    item.missingValue + '',
                    'N/A'
                ];
                fuels.push(value);
            }
            populateFuel(fuels);

            populateAuditCategory(tower.audits.comment);

            var tower_logs = [];
            var tower_log = data.tower_log;
            for (var key in tower_log) {
                var item = tower_log[key];
                var value = [
                    // string casting to work around sort.
                    item.stateName,
                    item.stateTimestampFormatted,
                    item.timestampFormatted,
                ];
                tower_logs.push(value);
            }
            populateTowerLog(tower_logs);

            var fuel_logs = [];
            var fuel_log = data.fuel_log;
            for (var key in fuel_log) {
                var item = fuel_log[key];
                var value = [
                    // string casting to work around sort.
                    item.fuelName,
                    item.delta + '',
                    item.value + '',
                    item.timestampFormatted
                ];
                fuel_logs.push(value);
            }
            populateFuelLog(fuel_logs);

        });
    });

    function populateTower(values) {
        populateDataTable('#tower_info', ['Overview'], values);
    }

    function populateFuel(values) {
        populateTable('#fuel_info',
            ['Fuel', 'Delta', 'Value', 'Optimal', 'Difference', 'Time'],
            values);
    }

    function populateFuelLog(values) {
        populateTable('#fuel_log',
            ['Fuel', 'Delta', 'Value', 'State Time'],
            values);
    }

    function populateAuditCategory(values) {

        var max_index = 3;
        var audits = [];
        var footer = null;
        for (var key in values) {
            if (key == max_index) {
                footer = $('<td colspan="3"><a href="">' +
                    '<i class="icon-search"></i> View all comments</a>' +
                '</td>');
                break;
            }

            var audit = values[key];
            var value = [
                // string casting to work around sort.
                audit.reason,
                audit.user,
                audit.timestampFormatted
            ];

            audits.push(value);
        }

        populateTable('#tower_comments',
            ['Comment', 'User', '@'],
            audits,
            footer
            );
    }

    function populateTowerLog(values) {
        populateTable('#tower_log',
            ['State', 'State Time', 'Added @'],
            values);
    }

    function populateTable(table_id, titles, values, footer) {
        $(table_id).TidyTable({
            enableCheckbox : false,
            enableMenu     : false,
            tableClass     : "table table-bordered table-condensed"
        },
        {
            columnTitles : titles,
            columnValues : values,
            tableFoot : footer
        });
    }

    function populateDataTable(table_id, titles, values) {
        $(table_id).TidyTable({
            enableCheckbox : false,
            enableMenu     : false,
            enableSort     : false,
            firstColspan   : 2,
            tableClass     : "table table-bordered table-condensed"
        },
        {
            columnTitles : titles,
            columnValues : values,
        });
    }

{% endblock %}
