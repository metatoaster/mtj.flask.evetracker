{% extends "layout.jinja" %}

{% block container %}

    <h1>Overview</h1>

    <div id="pos_overview">
      <h4><a href="strontium">Strontium report</a></h4>
    </div>

    <div id="pos_reinforced" class="hide">
      <h4>Reinforced Towers</h4>
      <div id="pos_reinforced_table">
      </div>
    </div>

    <div id="pos_overview">
      <h4>Lowest Online Towers</h4>
      <div id="pos_overview_table">
        <table class="table table-bordered table-condensed">
          <thead>
            <tr>
              <th>ID</th>
              <th>State</th>
              <th>Tower</th>
              <th>Region</th>
              <th>Moon</th>
              <th>Offline at</th>
              <th>Offline in</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </div>
    </div>

{% endblock %}

{% block script %}
    var script_root = '{{ request.script_root }}';

    $(document).ready(function() {
        var json_root = '{{ g.json_root }}';
        var values = [];

        $.get(json_root + '/overview', function(data) {
            if (data.error) {
                // XXX proper error messaging
                populateTable([data.error]);
                return null;
            }

            var towers = data.online;

            for (var key in towers) {
                var item = towers[key];
                values.push(towerToValue(item, script_root + '/tower/'));
            }
            populateOnline(values);

            values = [];
            var timestamp = data.timestamp
            var towers = data.reinforced;
            for (var key in towers) {
                var tower = towers[key];
                var value = [
                    {
                        'col_value': $('<span class="state-' + tower.stateName +
                            '"></span>'),
                        'title_value': tower.stateName,
                        'value': tower.state
                    },
                    tower.auditLabel,
                    tower.regionName,
                    tower.celestialName,
                    shortTowerName(tower.typeName),
                    tower.stateTimestampFormatted,
                    {
                        'col_value': tower.stateTimestampDeltaFormatted,
                        'value': tower.stateTimestamp - timestamp
                    },
                    {
                        'col_value': $('<a href="' + script_root +
                            '/tower/' + tower.id + '">' +
                            '<i class="icon-search"></i> details</a>'),
                        'value': tower.id
                    }
                ];

                values.push(value);
            }
            if (values.length) {
                populateReinforced(values);
            }

        });
    });

    function populateReinforced(values) {
        $('#pos_reinforced').removeClass('hide');
        $('#pos_reinforced_table').TidyTable({
            enableCheckbox : false,
            enableMenu     : false,
            tableClass     : "table table-bordered table-condensed tower-listing"
        },
        {
            columnTitles : [
                '', 'Label', 'Region', 'Moon', 'Tower', 'Exit at',
                'Exit in', 'Action'],
            columnValues : values,
        }, doSomething3);
    }

    function populateOnline(values) {
        $('#pos_overview_table').TidyTable({
            enableCheckbox : false,
            enableMenu     : false,
            tableClass     : "table table-bordered table-condensed tower-listing"
        },
        {
            columnTitles : [
                '', 'Label', 'Region', 'Moon', 'Tower', 'Offline at',
                'Offline in', 'Action'],
            columnValues : values,
        }, doSomething3);
    }

    function doSomething3(name, value) {
        // window.location.href = '{{ request.script_root }}/tower/' + name;
    }

{% endblock %}
